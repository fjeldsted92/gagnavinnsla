
import matplotlib
from mpl_toolkits.basemap import Basemap
import numpy as np
import matplotlib.pyplot as plt
from tkinter import *
import pandas as pd
import psycopg2
import getpass
#N: Gets data form the database for dates between date 1 and date 2
#F: date1, date2 = "yyyy:mm:yy"
#E: returns selected data from database between dates date1 and date2
def point_Data_Get(date1, date2,cursoritem):
    cursoritem.execute("SELECT  l.latitude, l.longitude, l.eventid, l.iyear, l.imonth, l.iday, ck.country_txt, l.city, ak.attacktype1_txt, a.suicide, a.gname, a.nperps,tk.targtype1_txt,t.nkill FROM locations l, attacks a, targets t, attackkey ak, targetkey tk, countrykey ck WHERE l.eventid = a.eventid AND l.eventid = t.eventid and t.targtype1 = tk.targtype1 and ck.country = l.country and ak.attacktype1 = a.attacktype1 and a.eventid BETWEEN (%s) AND (%s);",(date1,date2))
    c = cursoritem.fetchall()
    return c
#N: date A, date B = date_format_correcter(date1,date2)
#F: date1, date 2 er á formi 'YYYY:MM:DD'
#E: date A , B eru á formi ´YYYYMMDD0000´ svo það virkar sem samanburður við eventid
def date_format_correcter(date1, date2):
    print(date1)
    date1hold = date1.split(sep = ':')
    print(date1hold)
    date1hold.append('0000')
    print(date1hold)
    date2hold = date2.split(sep = ':')
    date2hold.append('0000')
    date1hold = ''.join(date1hold)
    date2hold = ''.join(date2hold)
    return date1hold, date2hold



#N: f = pointdatacsv.csv
#F: date1, date2 = "YYYY:MM:DD"
#E: pointdatacsv.csv contains the selected data in csv format
def point_file_write(date1, date2, cursoritem):
    f = open('pointdatacsv.csv','w')
    date_a, date_b = date_format_correcter(date1, date2)
    k = point_Data_Get(date_a, date_b,cursoritem)
    f.write('latitude, longitude, eventid, iyear, imonth, iday, country_txt, city, attacktype1_txt, suicide, gname, nperps, targtype1_txt, nkill\n')
    for i in k:
        l = []
        for j in range(14):
            f.write(str(i[j])+',')
        f.write('\n')   



def leave(conn,cursor):   
    cursor.close()
    conn.close()
    root.destroy()

def Connect():

    host = 'localhost'
    dbname = 'gavi'

    username = 'postgres'
    #pw = getpass.getpass()
    pw = 36543654
    conn_string = "host='{}' dbname='{}' user='{}' password='{}'".format(host, dbname, username, pw)

    print("Connecting to database {}.{} as {}".format(host, dbname, username))

    conn = psycopg2.connect(conn_string)

    cursor = conn.cursor()

    print("Connected!\n")
    return cursor, conn

def getstring():
    

    df = pd.read_csv('test.txt',)  
    fig = plt.figure(figsize=(20,10))
    ax = plt.axes()
    ax1 = plt.axes()
    map = Basemap(projection='gall',resolution = 'l',area_thresh = 100000.0,lat_0=0, lon_0=0)
    map.drawcoastlines()
    map.drawcountries()
    map.fillcontinents(color = '#888888')
    map.drawmapboundary(fill_color='#f4f4f4')
    x,y = (map(df['longitude'].values, df['latitude'].values))
    points_with_annotation2 = []
    points_with_annotation = []
    for i in range(len(x)):
        point, = map.plot(x[i], y[i], 'ro', markersize=6)
        annotation1=ax1.annotate("prufa 2",
        xy=(x[i], y[i]), xycoords='data',
        xytext=(0,0), textcoords='data',
        horizontalalignment="left",
        arrowprops=dict(arrowstyle="simple",
                        connectionstyle="arc3,rad=-0.2"),
        bbox=dict(boxstyle="round", facecolor="w", 
                  edgecolor="0.5", alpha=0.9)
        )
        annotation = ax.annotate("Virka",
        xy=(x[i], y[i]), xycoords='data',
        xytext=(4000000,10000000), textcoords='data',
        horizontalalignment="left",
        arrowprops=dict(arrowstyle="simple",
                        connectionstyle="arc3,rad=-0.2"),
        bbox=dict(boxstyle="round", facecolor="w", 
                  edgecolor="0.5", alpha=0.9)
        )
    # by default, disable the annotation visibility
        annotation.set_visible(False)
        annotation1.set_visible(False)
        points_with_annotation.append([point, annotation])
        points_with_annotation2.append([point, annotation1])

    def on_move(event):
        visibility_changed = False
        for point, annotation in points_with_annotation:
            should_be_visible = (point.contains(event)[0] == True)

            if should_be_visible != annotation.get_visible():
                visibility_changed = True
                annotation.set_visible(should_be_visible)

            if visibility_changed:        
                plt.draw()
    def on_click(event):
        visibility_changed = False
        for point, annotation1 in points_with_annotation2:
            should_be_visible = (point.contains(event)[0] == True)

            if should_be_visible != annotation1.get_visible():
                visibility_changed = True
                annotation1.set_visible(should_be_visible)

            if visibility_changed:        
                plt.draw()

    on_move_id = fig.canvas.mpl_connect('motion_notify_event', on_move)
    on_click_id= fig.canvas.mpl_connect('button_press_event', on_click)
    
    plt.show()
    return





cursor,conn = Connect()

root = Tk()
root.geometry('350x200+50+30')
root.title("")

        
to_date = StringVar()
to_date.set("2001:10:11")
from_date = StringVar()
from_date.set("2000:10:11")
Samtok= StringVar()
Samtok.set("")
#button1= Button(root, text= 'Teikna', command= getstring).grid(row=1, column=1)
#button2= Button(root, text='exit', command= leave).grid(row=8, column=3)
#button3= Button(root, text='Skoða tímabil', command= get_dates).grid(row=3,column=1) 
#button5= Button(root, text='Hriðjuverkasamtök', command=get_terr ).grid(row=3, column=3)
#button6= Button(root, text= 'Land', command=get_country).grid(row=4, column =3)
#button7= Button(root, text='Borg', command= get_city).grid(row=4, column =2)
#button8= Button(root, text='Mannskæðustu árásinar', command= get_deaths).grid(row=4, column =1)
Label(root, text="Tímabil").grid(row=0, column = 1)
Label(root, text="Frá:").grid(row=1)
fra=Entry(root,text =from_date)
fra.grid(row=1, column =1)
Label(root, text="Til:").grid(row=2)
fra_Update=Button(root, text='breyta', command=lambda: from_date.set(fra.get()))
fra_Update.grid(row=1, column=2)
til=Entry(root,text =to_date)
til.grid(row=2, column = 1)
til_Update=Button(root, text ='breyta', command=lambda:to_date.set(til.get())).grid(row = 2 , column =2)
dates_confirm= Button(root, text='prof', command=lambda:point_file_write(from_date.get(),to_date.get(),cursor) ).grid(row=3, column =1)
Label(root, text ='Hriðjuverkasamtök').grid(row=4)
HVS=Entry(root,text =Samtok)
HVS.grid(row= 4,column = 1)
Set_HVS = Button(root, text = 'breyta', command= lambda: Samtok.set(HVS.get())).grid(row=4, column =2) 

root.mainloop()
